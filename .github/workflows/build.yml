name: Build

on: push
permissions:
  actions: write
  contents: write

jobs:
  build-coreclr:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        arch: [ x64, x86 ]
        configuration: [ Release, Debug ]
        exclude:
          - os: macos-latest
            arch: x86
    steps:
      - id: set-vars
        uses: actions/github-script@v6
        with:
          script: |
            const os = "${{ matrix.os }}";
            const arch = "${{ matrix.arch }}";
            const configuration = "${{ matrix.configuration }}";

            switch (os) {
              case "ubuntu-latest":
                core.setOutput("extension", "so");
                core.setOutput("os-name", "Linux");
                core.setOutput("rid", "linux-" + arch);
                core.setOutput("build-cmd", "./build.sh");
                core.setOutput("dbg-ext", "dbg");
                core.setOutput("extra-build-args", "--keepnativesymbols true");
                break;

              case "windows-latest":
                core.setOutput("extension", "dll");
                core.setOutput("os-name", "windows");
                core.setOutput("rid", "windows-" + arch);
                core.setOutput("build-cmd", ".\\build.cmd");
                core.setOutput("dbg-ext", "pdb");
                core.setOutput("extra-build-args", "");
                break;

              case "macos-latest":
                core.setOutput("extension", "dylib");
                core.setOutput("os-name", "OSX");
                core.setOutput("rid", "macos-" + arch);
                core.setOutput("build-cmd", "./build.sh");
                core.setOutput("dbg-ext", "dsym");
                core.setOutput("extra-build-args", "--keepnativesymbols true");
                break;
            }

            core.setOutput("build-date", new Date().toISOString().split('T')[0].replace(/-/g, ''));

      - uses: actions/checkout@v3
      - if: matrix.os == 'ubuntu-latest'
        name: Install linux dependencies
        run: |
          sudo apt update
          sudo apt install -y libkrb5-dev liblttng-ust-dev
      - if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86'
        name: Build 32bit linux
        run: |
          sudo apt install -y debootstrap qemu-user-static qemu clang-9 libclang-9-dev llvm-9-dev
          . /etc/os-release
          sudo ./eng/common/cross/build-rootfs.sh x86 $VERSION_CODENAME
          ROOTFS_DIR=`pwd`/.tools/rootfs/x86 ./build.sh clr.runtime+clr.corelib+libs --cross --clang9 --arch x86 -c ${{ matrix.configuration }} /p:OfficialBuildId=${{ steps.set-vars.outputs.build-date }}.0 ${{ steps.set-vars.outputs.extra-build-args }}
      - name: Build
        if: matrix.os != 'ubuntu-latest' || matrix.arch != 'x86'
        run: |
          ${{ steps.set-vars.outputs.build-cmd }} clr.runtime+clr.corelib+libs -c ${{ matrix.configuration }} -a ${{ matrix.arch }} /p:OfficialBuildId=${{ steps.set-vars.outputs.build-date }}.0 ${{ steps.set-vars.outputs.extra-build-args }}
      - name: Collect final build
        shell: bash
        run: |
          mkdir -p artifacts/ci/${{ steps.set-vars.outputs.rid }}
          cp artifacts/bin/coreclr/${{ steps.set-vars.outputs.os-name }}.${{ matrix.arch }}.${{ matrix.configuration }}/${{ matrix.os != 'windows-latest' && 'lib{' || '{clretwrc,mscorrc,' }}clrgc,clrjit,coreclr,dbgshim,jitinterface_${{ matrix.arch }},mscordaccore,mscordbi}.${{ steps.set-vars.outputs.extension }} artifacts/ci/${{ steps.set-vars.outputs.rid }}/
          cp artifacts/bin/coreclr/${{ steps.set-vars.outputs.os-name }}.${{ matrix.arch }}.${{ matrix.configuration }}/${{ matrix.os != 'windows-latest' && 'lib{' || '{clretwrc,mscorrc,' }}clrgc,clrjit,coreclr,dbgshim,jitinterface_${{ matrix.arch }},mscordaccore,mscordbi}.${{ steps.set-vars.outputs.dbg-ext }} artifacts/ci/${{ steps.set-vars.outputs.rid }}/ 2>/dev/null || :
          cp artifacts/bin/coreclr/${{ steps.set-vars.outputs.os-name }}.${{ matrix.arch }}.${{ matrix.configuration }}/PDB/${{ matrix.os != 'windows-latest' && 'lib{' || '{clretwrc,mscorrc,' }}clrgc,clrjit,coreclr,dbgshim,jitinterface_${{ matrix.arch }},mscordaccore,mscordbi}.${{ steps.set-vars.outputs.dbg-ext }} artifacts/ci/${{ steps.set-vars.outputs.rid }}/ 2>/dev/null || :
          cp artifacts/bin/coreclr/${{ steps.set-vars.outputs.os-name }}.${{ matrix.arch }}.${{ matrix.configuration }}/IL/System.Private.CoreLib.dll artifacts/ci/${{ steps.set-vars.outputs.rid }}/
          cp artifacts/bin/runtime/net*-${{ steps.set-vars.outputs.os-name }}-${{ matrix.configuration }}-${{ matrix.arch }}/*.{dll,${{ steps.set-vars.outputs.extension }}} artifacts/ci/${{ steps.set-vars.outputs.rid }}/
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.set-vars.outputs.rid }}-${{ matrix.configuration }}
          path: |
            artifacts/ci/${{ steps.set-vars.outputs.rid }}
      - uses: actions/upload-artifact@v3
        with:
          name: mini-coreclr-${{ matrix.configuration }}
          path: |
            artifacts/ci/

  build-mono:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-android-20200422191843-e2c3f83
    strategy:
      fail-fast: false
      matrix:
        arch: [ arm64, arm, x64, x86 ]
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: ./build.sh mono+libs --os Android --arch ${{ matrix.arch }} -c Release
      - uses: actions/upload-artifact@v3
        with:
          name: android-${{ matrix.arch }}
          path: artifacts/bin/microsoft.netcore.app.runtime.android-${{ matrix.arch }}/Release/runtimes/android-${{ matrix.arch }}/

  create-release:
    needs: [ build-coreclr, build-mono ]
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Collect files
        id: collect-info
        run: |
          mkdir release
          cd artifacts
          for i in */; do (cd "${i%/}" && zip -0 -r "../../release/${i%/}.zip" *) & done; wait
          echo "::set-output name=release_tag::$(date +%Y%m%d).$GITHUB_RUN_NUMBER"
      - name: Create release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ steps.collect-info.outputs.release_tag }}
          title: "Build ${{ steps.collect-info.outputs.release_tag }}"
          files: |
            release/*.zip
